{"meta":{"title":"0x0's Blog","subtitle":"Font-end & Technology","description":"不积跬步 无以至千里","author":"wzc0x0","url":"https://wzc0x0.github.io"},"pages":[{"title":"分类","date":"2016-03-20T08:01:45.000Z","updated":"2017-03-20T09:00:31.923Z","comments":true,"path":"categories/index.html","permalink":"https://wzc0x0.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2016-03-20T01:25:47.000Z","updated":"2017-03-20T08:59:47.772Z","comments":true,"path":"tags/index.html","permalink":"https://wzc0x0.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"css垂直居中","slug":"css-center-vertical","date":"2016-05-03T16:00:00.000Z","updated":"2017-03-20T13:50:30.990Z","comments":true,"path":"programming/css-center-vertical.html","link":"","permalink":"https://wzc0x0.github.io/programming/css-center-vertical.html","excerpt":"我们都清楚元素相对其父级元素水平居中展示的方法：对于inline 的元素，父级元素设置text-align : center。对于block元素，我们会设定其margin: 0 auto。然而，垂直居中的实现方法，并没有这么简单，下面6种方法。","text":"我们都清楚元素相对其父级元素水平居中展示的方法：对于inline 的元素，父级元素设置text-align : center。对于block元素，我们会设定其margin: 0 auto。然而，垂直居中的实现方法，并没有这么简单，下面6种方法。参考文章 Vertical-Align vertical-align: middle该属性定义行内元素的基线相对于该元素所在行的基线的垂直对齐。在表单元格中，这个属性会设置单元格框中的单元格内容的对齐方式.But !!!Vertical-align doesn’t apply to block-level elements like a paragraph inside a div. 123&lt;div class=\"container\"&gt; &lt;div class=\"content\"&gt;middle me!&lt;/div&gt;&lt;/div&gt; 12.container&#123;display: table;&#125;.content&#123;display: table-cell;vertical-align:center&#125; Line-height 该方法适用于单行文本(或图片)的垂直居中，将line-height属性设置的大于font-size，且等于容器的高度。 绝对定位 margin 123&lt;div class=\"container\"&gt; &lt;div class=\"content\"&gt;middle me!&lt;/div&gt;&lt;/div&gt; 123456789.container&#123;position: relative;height:800px&#125;.content&#123; position:absolute; top:50%; left:50%; height:30%; width:50%; margin:-15% 0 0 -25% /*margin 为负值且为自身尺寸的一半*/&#125; 绝对定位 Stretching 123&lt;div class=\"container\"&gt; &lt;div class=\"content\"&gt;middle me!&lt;/div&gt;&lt;/div&gt; 1234567891011.container&#123;position: relative;height:300px&#125;.content&#123; position:absolute; top:0; bottom:0; left:0; right:0; height:30%; width:50%; margin:auto&#125; 这种方法，在IE 8 以下不 work … 绝对定位 and transform123&lt;div class=\"container\"&gt; &lt;div class=\"content\"&gt;middle me!&lt;/div&gt;&lt;/div&gt; 12345678.container&#123;position: relative;height:300px&#125;.content&#123; position: absolute; top:50%; left:50%; width: 150px; height: 130px; transform:translate(-50%,-50%); /*向左向上移动自身尺寸的一半*/ Flex布局123&lt;div class=\"container\"&gt; &lt;div class=\"content\"&gt;middle me!&lt;/div&gt;&lt;/div&gt; 12345678910.container&#123; display:flex; height:300px; justify-content: center; align-items: center;&#125;.content&#123; /*margin:auto;直接flex就可以*/ height:200px;&#125;","categories":[{"name":"前端开发","slug":"programming","permalink":"https://wzc0x0.github.io/categories/programming/"}],"tags":[{"name":"css","slug":"css","permalink":"https://wzc0x0.github.io/tags/css/"}]},{"title":"JS中的call、apply、bind的那些事?","slug":"call","date":"2016-03-17T15:56:48.000Z","updated":"2017-03-20T08:58:08.705Z","comments":true,"path":"programming/call.html","link":"","permalink":"https://wzc0x0.github.io/programming/call.html","excerpt":"这三种函数都是是用来改变函数执行时的上下文，改变函数this指向。同时也可以用来继承对象的方法。","text":"这三种函数都是是用来改变函数执行时的上下文，改变函数this指向。同时也可以用来继承对象的方法。 示例：1234567891011121314151617function Animal(name)&#123; this.name = name;&#125;Animal.prototype.sayHi = function()&#123; console.log(this.name)&#125;var dog = new Animal('Wang!');dog.sayHi();// 创建对象,但没有animal方法var cat = &#123; name:'Miao!'&#125;dog.sayHi.call(cat);dog.sayHi.apply(cat);dog.sayHi.bind(cat)();//控制台输出三次 call,apply改变了函数执行时的上下文this，bind则返回了改变后的函数。 call &amp; apply的区别 第一个参数是要改变上下文的对象，区别在第二个参数。 apply是以参数数组形式 call则是单个参数一一对应 例如:1234// 求该数组最大最小值var a = [1,2,3]Math.max.apply(null,a) //参数数组形式Math.max.call(null,1,2,3) // 参数罗列 常用方法1234567function isArray(obj)&#123; return Object.prototype.toString.apply(obj) == '[object Array]';&#125;//数组类型判断function reserveArr(obj)&#123; return Array.prototype.slice.apply(obj)&#125;//伪数组转换","categories":[{"name":"前端开发","slug":"programming","permalink":"https://wzc0x0.github.io/categories/programming/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://wzc0x0.github.io/tags/Javascript/"}]},{"title":"字符串与数组常用方法解析","slug":"string-array-function","date":"2016-03-17T15:56:04.000Z","updated":"2017-03-21T03:39:17.468Z","comments":true,"path":"programming/string-array-function.html","link":"","permalink":"https://wzc0x0.github.io/programming/string-array-function.html","excerpt":"字符串与数组操作作为前端攻城狮经常处理的数据类型，搞清各种方式很重要！","text":"字符串与数组操作作为前端攻城狮经常处理的数据类型，搞清各种方式很重要！ 字符串篇 substr() String.substr(start,length)从start处抽取length个字符，如果负数，从尾部开始。length可选，如果没有，抽取整个字符串。 substring() String.substring(start,end)从start处开始到end处(不包括end)抽取字符。slice可以完全取代它———来自《Javascript语言精粹》 slice() String.slice(start,end)若start参数是负数，它将与string.length相加。end参数可选，默认是string.length。如果end也是负数，同样与string.length相加。 split() String.split(separator,limit)该方法把当前string分割成片段来创建一个字符串数组。可选参数limit可以限制分割片段的数量。separator参数可以是字符串或者正则表达。 replace() String.replace(reg/str,value)字符串的查找替换操作，返回一个新的字符串。若第一个参数是字符串只会在第一次匹配的地方替换。当换成正则表达并且带g标识，则可以全部替换。value中有$字符会有特殊意义，value还可以是函数 indexOf() String.indexOf(str,position)该方法从string中查找str，如果找到返回第一次匹配字符的位置，没有则返回-1。可选参数position从指定位置开始查找。 数组篇 concat(item..) 可以把多个参数附加其后产生新的数组。用于数组的连接 join(params) 可以把一个数组构造成字符串。默认参数是逗号分割, slice(start,end) 在数组中与字符串中方法一致 splice(start,deleteCount,item) splice方法从数组中移除一个或多个元素，并用新的item替换它们。从start开始，移除deleteCount个数。item可选，是要替换的元素。主要作用是从数组中指定位置删除数组中的元素。 shift()| unshift() | push() | pop() 简单的数组方法略。","categories":[{"name":"前端开发","slug":"programming","permalink":"https://wzc0x0.github.io/categories/programming/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://wzc0x0.github.io/tags/Javascript/"}]},{"title":"欢迎来到我的博客！","slug":"my-first-blog","date":"2016-03-04T14:41:23.000Z","updated":"2017-03-20T08:57:34.395Z","comments":true,"path":"Hello-world/my-first-blog.html","link":"","permalink":"https://wzc0x0.github.io/Hello-world/my-first-blog.html","excerpt":"","text":"本博客记录自己开发(有趣地玩)过程中的所思，所想，所得。同时也是与大家沟通交流的小平台！","categories":[{"name":"Hello world!","slug":"Hello-world","permalink":"https://wzc0x0.github.io/categories/Hello-world/"}],"tags":[]},{"title":"Hello world!","slug":"hello-world","date":"2016-03-03T16:00:00.000Z","updated":"2017-03-21T06:29:19.897Z","comments":true,"path":"Hello-world/hello-world.html","link":"","permalink":"https://wzc0x0.github.io/Hello-world/hello-world.html","excerpt":"学习每一门语言第一句话都是把神奇的Hello world!打印出来，而本博客是怎么说出第一句Hello world!呢?我在这里记录了诞生的经过。","text":"学习每一门语言第一句话都是把神奇的Hello world!打印出来，而本博客是怎么说出第一句Hello world!呢?我在这里记录了诞生的经过。 首先感谢Github 想起Git,我第一印象不是复杂的命令更新，提交，分支，合并等等，而是一次满满感恩的回忆！还记得当年“墙”还不是那么高，随意一个梯子(VPN之类的)还能时不时去看看资本世界的水深火热，然而道高一尺魔高一丈，随着墙的高筑，一般的梯子也爬不出去了。 Git这个全球最大的同性交友网站(笑)，为每一个IT从业者分享了来自全世界“搬砖者们”死亡多少脑细胞后的结晶。Git推出的学生计划，让全世界的大学生(天朝需要学生证)，免费使用云计算DigitalOcean(vps)一年。大公司有大胸怀，Git履行了扶持社会的职责。如今阿里，腾讯都有相关的活动，也只是呵呵了。 最后再次感谢Git让我第一次接触的云计算和酷酷的linux。 本博客所用到的技术 服务端 github.io 博客框架hexo(需要NodeJs环境) 博客主题next 博客语言：markdown 直接查看官方文档!","categories":[{"name":"Hello world!","slug":"Hello-world","permalink":"https://wzc0x0.github.io/categories/Hello-world/"}],"tags":[{"name":"Let's start！","slug":"Let-s-start！","permalink":"https://wzc0x0.github.io/tags/Let-s-start！/"}]},{"title":"Javascript面向对象开发","slug":"js-oop","date":"2015-11-21T06:14:06.000Z","updated":"2017-03-21T09:54:12.437Z","comments":true,"path":"programming/js-oop.html","link":"","permalink":"https://wzc0x0.github.io/programming/js-oop.html","excerpt":"Javascript是世界上最被误解的编程语言————《Javascript语言精粹》。 面向对象与面向过程。当程序员拿到一个需求时，第一个反映就是如何直接地去实现这个需求，这就是面向过程的思维模式。面向对象的思维模式是不是直接考虑实现，而是进行需求分析，拆分客体（对象），寻找客体之间的联系。 面向对象的特点。 一切皆对象 对象具有封装和继承特性 对象与对象之间使用消息通信，各自存在信息隐藏","text":"Javascript是世界上最被误解的编程语言————《Javascript语言精粹》。 面向对象与面向过程。当程序员拿到一个需求时，第一个反映就是如何直接地去实现这个需求，这就是面向过程的思维模式。面向对象的思维模式是不是直接考虑实现，而是进行需求分析，拆分客体（对象），寻找客体之间的联系。 面向对象的特点。 一切皆对象 对象具有封装和继承特性 对象与对象之间使用消息通信，各自存在信息隐藏 Javascript中的面向对象 大多数程序员首先学习或者使用的是类似 Java、C++ 等高级编译型语言（Java 虽然是半编译半解释，但一般做为编译型来讲解），因而先入为主地接受了“类”这个面向对象实现方式，从而在学习脚本语言的时候，习惯性地用类式面向对象语言中的概念来判断该语言是否是面向对象语言，或者是否具备面向对象特性。这也是阻碍程序员深入学习并掌握 JavaScript 的重要原因之一。——节选伯乐在线 Javascript是基于原型(prototype)的面向对象方式 在基于类的面向对象方式中，对象（object）依靠 类（class）来产生。而在基于原型的面向对象方式中，对象（object）则是依靠 构造器（constructor）利用 原型（prototype）构造出来的。引用各类原型，构造器组装出来对象。博主认为这是更为彻底的面向对象思想。 彻底理解原型链在 ECMAScript 中，每个由构造器创建的对象拥有一个指向构造器 prototype 属性值的 隐式引用（implicit reference），这个引用称之为原型（prototype）。进一步，每个原型可以拥有指向自己原型的 隐式引用（即该原型的原型），如此下去，这就是所谓的原型链（prototype chain）。在具体的语言实现中，每个对象都有一个 __proto__ 属性来实现对原型的 隐式引用。 在ECMAScript 规定，当要给某个对象的属性赋值时，解释器会查找该对象原型链中第一个含有该属性的对象（注：原型本身就是一个对象，那么原型链即为一组对象的链。对象的原型链中的第一个对象是该对象本身）进行赋值。反之，如果要获取某个对象属性的值，解释器自然是返回该对象原型链中首先具有该属性的对象属性值。","categories":[{"name":"前端开发","slug":"programming","permalink":"https://wzc0x0.github.io/categories/programming/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://wzc0x0.github.io/tags/Javascript/"}]}]}